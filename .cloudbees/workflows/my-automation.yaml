apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: My automation

on:
  push:
    branches:
      - main

jobs:
  Checkout:
    steps:
      - name: checkout
        uses: cloudbees-io/checkout@v1

  Build:
    needs: Checkout
    steps:
      - uses: docker://alpine/git:latest
        run: |
          git config --global --add safe.directory /cloudbees/workspace

      - name: checkout
        uses: cloudbees-io/checkout@v1

      - name: Build 
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          mvn clean install -DskipTests=true


  StaticAnalysis:
    needs: Build
    steps:
      - uses: cloudbees-io/sonarqube-sast-scan-code@v1
        name: Scan
        kind: scan
        with:
          server-url: https://sonarqube.cb-demos.io
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}
          language: Java

      - uses: cloudbees-io/sonarqube-bundled-sast-scan-code@v2
        name: Scan with Java
        kind: scan
        with:
          language: JAVA

      - uses: cloudbees-io/findsecbugs-sast-scan-code@v1
        name: Scan with Find Security Bugs
        kind: scan
        with:
          language: LANGUAGE_JAVA

      - uses: sbatchelder-cba/sonarqube-cba@v0.0.3
        name: Scan GP
        with:
          project-key: apigateway
          token: ${{ secrets.token }}


  ArtifactPublish:
    needs: [StaticAnalysis]
    steps:
      - uses: docker://alpine/git:latest
        run: |
          git config --global --add safe.directory /cloudbees/workspace
          echo "Listing directory contents before Build:"
          ls -lR /cloudbees/workspace
      - name: checkout
        uses: cloudbees-io/checkout@v1
      - name: Publish to Nexus
        uses: docker://maven:3-eclipse-temurin-17
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          mvn deploy -DskipTests \
            -DaltDeploymentRepository=nexus::default::https://${NEXUS_USERNAME}:${NEXUS_PASSWORD}@nexus.preview.cb-demos.io/repository/Petclinic/
      - name: List directory contents after Publish
        uses: docker://alpine:latest
        run: |
          echo "Current directory: $(pwd)"
          ls -lR /cloudbees/workspace


  
  DeployApplicationAWS:
    needs: [ArtifactPublish]
    steps:
      - name: Configure AWS credentials
        uses: cloudbees-io/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Remove existing key pair if exists
        uses: docker://amazon/aws-cli:latest
        run: |
          if aws ec2 describe-key-pairs --key-name "ashokpetclinic" --region us-east-1; then
            aws ec2 delete-key-pair --key-name "ashokpetclinic" --region us-east-1
          fi

      - name: Create and use EC2 key pair
        uses: docker://amazon/aws-cli:latest
        run: |
          aws ec2 create-key-pair --key-name ashokpetclinic --region us-east-1 --query 'KeyMaterial' --output text > ashokpetclinic.pem
          chmod 400 ashokpetclinic.pem
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-04b70fa74e45c3917 --instance-type t2.micro --key-name "ashokpetclinic" --region us-east-1 --query 'Instances[0].InstanceId' --output text)
          echo $INSTANCE_ID > instance_id.txt
          ls
          cat instance_id.txt

      - name: Wait for EC2 instance to be running
        uses: docker://amazon/aws-cli:latest
        run: |
          INSTANCE_ID=$(cat instance_id.txt)
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicDnsName' --output text)
          echo $PUBLIC_DNS:9898 > public_dns.txt
          cat public_dns.txt

      - name: Add delay to ensure instance is ready
        uses: docker://alpine:latest
        run: |
          echo "Waiting for 60 seconds to ensure the instance is ready..."
          sleep 60

      - name: Download artifact from Nexus
        uses: docker://alpine:latest
        run: |
          apk update
          apk add curl
          curl -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} -O https://nexus.preview.cb-demos.io/repository/Petclinic/org/springframework/samples/petclinic/api/springpetclinicapigateway/3.2.4/spring-petclinic-api-gateway-3.2.4.jar
          ls

      - name: Transfer artifact to EC2 instance
        uses: docker://alpine:latest
        run: |
          apk update
          apk add openssh-client
          PUBLIC_DNS=$(cat public_dns.txt | cut -d ':' -f 1)
          scp -o StrictHostKeyChecking=no -i ashokpetclinic.pem  spring-petclinic-api-gateway-3.2.4.jar ubuntu@$PUBLIC_DNS:/home/ubuntu/

      - name: Install Java 17 on EC2 instance
        uses: docker://alpine:latest
        run: |
          apk update
          apk add openssh-client
          PUBLIC_DNS=$(cat public_dns.txt | cut -d ':' -f 1)
          ssh -o StrictHostKeyChecking=no -i ashokpetclinic.pem ubuntu@$PUBLIC_DNS << 'EOF'
            sudo apt update
            sudo apt install -y openjdk-17-jdk
            java -version
            nohup java -jar /home/ubuntu/spring-petclinic-api-gateway-3.2.4.jar > /home/ubuntu/api-server.log 2>&1 &
            disown
          EOF
      - name: View public DNS with port 9898
        uses: docker://alpine:latest
        run: |
          echo "Public DNS with port 9898:"
          PUBLIC_DNS=$(cat public_dns.txt)
          echo "http://$PUBLIC_DNS"

      - name: Output DNS URL
        uses: docker://alpine:latest
        run: |
          PUBLIC_DNS=$(cat public_dns.txt | cut -d ':' -f 1)
          echo "Application URL: http://$PUBLIC_DNS:9898"
